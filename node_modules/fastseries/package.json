{
  "_args": [
    [
      {
        "raw": "fastseries@^1.7.0",
        "scope": null,
        "escapedName": "fastseries",
        "name": "fastseries",
        "rawSpec": "^1.7.0",
        "spec": ">=1.7.0 <2.0.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/steed"
    ]
  ],
  "_from": "fastseries@>=1.7.0 <2.0.0",
  "_id": "fastseries@1.7.2",
  "_inCache": true,
  "_location": "/fastseries",
  "_nodeVersion": "4.2.0",
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "3.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fastseries@^1.7.0",
    "scope": null,
    "escapedName": "fastseries",
    "name": "fastseries",
    "rawSpec": "^1.7.0",
    "spec": ">=1.7.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/steed"
  ],
  "_resolved": "https://registry.npmjs.org/fastseries/-/fastseries-1.7.2.tgz",
  "_shasum": "d22ce13b9433dff3388d91dbd6b8bda9b21a0f4b",
  "_shrinkwrap": null,
  "_spec": "fastseries@^1.7.0",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/steed",
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "bugs": {
    "url": "https://github.com/mcollina/fastseries/issues"
  },
  "dependencies": {
    "reusify": "^1.0.0",
    "xtend": "^4.0.0"
  },
  "description": "Zero-overhead asynchronous series/each/map function calls",
  "devDependencies": {
    "async": "^1.5.0",
    "coveralls": "^2.11.6",
    "fastbench": "^1.0.0",
    "faucet": "0.0.1",
    "istanbul": "^0.4.1",
    "neo-async": "^1.7.0",
    "pre-commit": "^1.0.6",
    "standard": "^5.4.1",
    "tape": "^4.2.2",
    "tiny-each-async": "^2.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "d22ce13b9433dff3388d91dbd6b8bda9b21a0f4b",
    "tarball": "https://registry.npmjs.org/fastseries/-/fastseries-1.7.2.tgz"
  },
  "gitHead": "01780b36c840f185ba93d5a63b18643f5690f5bd",
  "homepage": "https://github.com/mcollina/fastseries",
  "keywords": [
    "series",
    "fast",
    "async"
  ],
  "license": "ISC",
  "main": "series.js",
  "maintainers": [
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    }
  ],
  "name": "fastseries",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# fastseries\n\n[![npm version][npm-badge]][npm-url]\n[![Build Status][travis-badge]][travis-url]\n[![Coverage Status][coveralls-badge]][coveralls-url]\n[![Dependency Status][david-badge]][david-url]\n\nZero-overhead series function call for node.js.\nAlso supports `each` and `map`!\n\nBenchmark for doing 3 calls `setImmediate` 1 million times:\n\n* non-reusable `setImmediate`: 3887ms\n* `async.series`: 5981ms\n* `async.eachSeries`: 5087ms\n* `async.mapSeries`: 5540ms\n* `neoAsync.series`: 4338ms\n* `neoAsync.eachSeries`: 4195ms\n* `neoAsync.mapSeries`: 4237ms\n* `tiny-each-async`: 4575ms\n* `fastseries` with results: 4096ms\n* `fastseries` without results: 4063ms\n* `fastseries` map: 4032ms\n* `fastseries` each: 4168ms\n\nThese benchmarks where taken via `bench.js` on node 4.2.2, on a MacBook\nPro Retina 2014.\n\nIf you need zero-overhead parallel function call, check out\n[fastparallel](http://npm.im/fastparallel).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n## Example for series call\n\n```js\nvar series = require('fastseries')({\n  // this is a function that will be called\n  // when a series completes\n  released: completed,\n\n  // if you want the results, then here you are\n  results: true\n})\n\nseries(\n  {}, // what will be this in the functions\n  [something, something, something], // functions to call\n  42, // the first argument of the functions\n  done // the function to be called when the series ends\n)\n\nfunction late (arg, cb) {\n  console.log('finishing', arg)\n  cb(null, 'myresult-' + arg)\n}\n\nfunction something (arg, cb) {\n  setTimeout(late, 1000, arg, cb)\n}\n\nfunction done (err, results) {\n  console.log('series completed, results:', results)\n}\n\nfunction completed () {\n  console.log('series completed!')\n}\n```\n\n## Example for each and map calls\n\n```js\nvar series = require('fastseries')({\n  // this is a function that will be called\n  // when a series completes\n  released: completed,\n\n  // if you want the results, then here you are\n  // passing false disables map\n  results: true\n})\n\nseries(\n  {}, // what will be this in the functions\n  something, // functions to call\n  [1, 2, 3], // the first argument of the functions\n  done // the function to be called when the series ends\n)\n\nfunction late (arg, cb) {\n  console.log('finishing', arg)\n  cb(null, 'myresult-' + arg)\n}\n\nfunction something (arg, cb) {\n  setTimeout(late, 1000, arg, cb)\n}\n\nfunction done (err, results) {\n  console.log('series completed, results:', results)\n}\n\nfunction completed () {\n  console.log('series completed!')\n}\n\n```\n\n## Caveats\n\nThe `done` function will be called only once, even if more than one error happen.\n\nThis library works by caching the latest used function, so that running a new series\ndoes not cause **any memory allocations**.\n\n## License\n\nISC\n\n[npm-badge]: https://badge.fury.io/js/fastseries.svg\n[npm-url]: https://badge.fury.io/js/fastseries\n[travis-badge]: https://api.travis-ci.org/mcollina/fastseries.svg\n[travis-url]: https://travis-ci.org/mcollina/fastseries\n[coveralls-badge]:https://coveralls.io/repos/mcollina/fastseries/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/mcollina/fastseries?branch=master\n[david-badge]: https://david-dm.org/mcollina/fastseries.svg\n[david-url]: https://david-dm.org/mcollina/fastseries\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/fastseries.git"
  },
  "scripts": {
    "coverage": "istanbul cover tape test.js; cat coverage/lcov.info | coveralls",
    "lint": "standard",
    "test": "tape test.js | faucet"
  },
  "version": "1.7.2"
}
