{
  "_args": [
    [
      {
        "raw": "pull-window@^2.1.4",
        "scope": null,
        "escapedName": "pull-window",
        "name": "pull-window",
        "rawSpec": "^2.1.4",
        "spec": ">=2.1.4 <3.0.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pull-level"
    ]
  ],
  "_from": "pull-window@>=2.1.4 <3.0.0",
  "_id": "pull-window@2.1.4",
  "_inCache": true,
  "_location": "/pull-window",
  "_nodeVersion": "5.11.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/pull-window-2.1.4.tgz_1463951602798_0.8949018174316734"
  },
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pull-window@^2.1.4",
    "scope": null,
    "escapedName": "pull-window",
    "name": "pull-window",
    "rawSpec": "^2.1.4",
    "spec": ">=2.1.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pull-level"
  ],
  "_resolved": "https://registry.npmjs.org/pull-window/-/pull-window-2.1.4.tgz",
  "_shasum": "fc3b86feebd1920c7ae297691e23f705f88552f0",
  "_shrinkwrap": null,
  "_spec": "pull-window@^2.1.4",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pull-level",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/pull-window/issues"
  },
  "dependencies": {
    "looper": "^2.0.0"
  },
  "description": "Aggregate a pull-stream into windows.",
  "devDependencies": {
    "pull-stream": "^3.4.0",
    "tape": "~1.0.4"
  },
  "directories": {},
  "dist": {
    "shasum": "fc3b86feebd1920c7ae297691e23f705f88552f0",
    "tarball": "https://registry.npmjs.org/pull-window/-/pull-window-2.1.4.tgz"
  },
  "gitHead": "19a35633f19ddf6597e0c91da36459dae862de5c",
  "homepage": "https://github.com/dominictarr/pull-window",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "pull-window",
  "optionalDependencies": {},
  "readme": "# pull-window\n\nAggregate a pull-stream into windows.\n\nSeveral helpers are provided for particular types of windows,\nsliding, tumbling, etc.\n\nAnd also, a low level \n\n## Example: \"tumbling\" window\n\nsum every 10 items.\n\n``` js\nvar pull   = require('pull-stream')\nvar window = require('pull-window')\n\nfunction everyTen () {\n  var i = 0\n  //window calls init with each data item,\n  //and a callback to close that window.\n  return window(function (data, cb) {\n    //if you don't want to start a window here,\n    //return undefined\n    if(i != 0) return\n    var sum = 0\n\n    //else return a function.\n    //this will be called all data\n    //until you callback.\n    return function (end, data) {\n      if(end) return cb(null, sum)\n      sum += data\n      if(++i >= 10) {\n        i = 0\n        cb(null, sum)\n      }\n    }\n  }\n}\n\npull(\n  pull.count(1000),\n  everyTen(),\n  pull.log()\n)\n```\n\n## Example: variable sized window\n\nEach window doesn't have to be the same size...\n\n``` js\nvar pull   = require('pull-stream')\nvar window = require('pull-window')\n\nfunction groupTo100 () {\n  var sum = null\n  return window(function (_, cb) {\n    if(sum != null) return\n\n    //sum stuff together until you have 100 or more\n    return function (end, data) {\n      if(end) return cb(null, sum)\n      sum += data\n      if(sum >= 100) {\n        //copy sum like this, incase the next item\n        //comes through sync\n        var _sum = sum; sum = null\n        cb(null, _sum)\n      }\n    }\n  })\n}\n\npull(\n  pull.count(1000)\n  groupTo100(),\n  pull.log()\n)\n```\n\n## Example: sliding window\n\nto make more over lapping windows\njust return the window function more often.\n\n``` js\nvar pull   = require('pull-stream')\nvar window = require('pull-window')\n\nfunction sliding () {\n  return window(function (_, cb) {\n    var sum = 0, i = 0\n\n    //sum stuff together until you have 100 or more\n    return function (end, data) {\n      if(end) return cb(null, sum)\n      sum += data\n      if(++i >= 10) {\n        //in this example, each window gets it's own sum,\n        //so we don't need to copy it.\n        cb(null, sum)\n      }\n    }\n  })\n}\n\npull(\n  pull.count(100)\n  sliding(),\n  pull.log()\n)\n```\n\n\n## API\n\n\n### window (start, map)\n``` js\n\nwindow(function startWindow (data, cb) {\n\n  //called on each chunk\n  //including the first one\n  return function addToWindow (end, data) {\n    //cb(null, aggregate) when done.\n  }\n}, function mapWindow (start, data) {\n  //(optional)\n  //map the window to something that tracks start, also\n})\n```\n\nBy default, windows are mapped to `{start: firstData, data: aggregate}`.\nunless you pass in an different `mapWindow` function.\n\n\n### window.sliding(reduce, size)\n\nreduce every `size` items into a single value, in a sliding window\n\n### window.recent(size, time)\n\ntumbling window that groups items onto an array,\neither every `size` items, or within `time` ms,\nwhich ever occurs earliest. \n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/pull-window.git"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "version": "2.1.4"
}
