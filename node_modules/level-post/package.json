{
  "_args": [
    [
      {
        "raw": "level-post@^1.0.7",
        "scope": null,
        "escapedName": "level-post",
        "name": "level-post",
        "rawSpec": "^1.0.7",
        "spec": ">=1.0.7 <2.0.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pull-level"
    ]
  ],
  "_from": "level-post@>=1.0.7 <2.0.0",
  "_id": "level-post@1.0.7",
  "_inCache": true,
  "_location": "/level-post",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/level-post_1.0.7_1518151917513_0.4998013477555807"
  },
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "level-post@^1.0.7",
    "scope": null,
    "escapedName": "level-post",
    "name": "level-post",
    "rawSpec": "^1.0.7",
    "spec": ">=1.0.7 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pull-level"
  ],
  "_resolved": "https://registry.npmjs.org/level-post/-/level-post-1.0.7.tgz",
  "_shasum": "19ccca9441a7cc527879a0635000f06d5e8f27d0",
  "_shrinkwrap": null,
  "_spec": "level-post@^1.0.7",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pull-level",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/level-post/issues"
  },
  "dependencies": {
    "ltgt": "^2.1.2"
  },
  "description": "get consistent post hooks for leveldb.",
  "devDependencies": {
    "bytewise": "~0.7.1",
    "level-test": "^2.0.2",
    "tape": "^2.13.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-PWYqG4Q00asOrLhX7BejSajByB4EmG2GaKHfj3h5UmmZ2duciXLPGYWIjBzLECFWUGOZWlm5B20h/n3Gs3HKew==",
    "shasum": "19ccca9441a7cc527879a0635000f06d5e8f27d0",
    "tarball": "https://registry.npmjs.org/level-post/-/level-post-1.0.7.tgz",
    "fileCount": 9,
    "unpackedSize": 7394
  },
  "gitHead": "9021f153f159aa1d13233908ebe616f650e78f22",
  "homepage": "https://github.com/dominictarr/level-post",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "level-post",
  "optionalDependencies": {},
  "readme": "# level-post\n\nget consistent post hooks for leveldb.\n\n[![travis](https://travis-ci.org/dominictarr/level-post.png?branch=master)\n](https://travis-ci.org/dominictarr/level-post)\n\n[![testling](http://ci.testling.com/dominictarr/level-post.png)\n](http://ci.testling.com/dominictarr/level-post)\n\n``` js\nvar level = require('level')\n\nvar db = level('/tmp/whatever-db')\n\npost(db, function (op) {\n  //this is called after every put, del, or batch\n  console.log(op)\n})\n\ndb.put('foo', 'bar', function (err) {\n  //...\n})\n```\n\n# methods\n\n## post(db, opts={}, cb)\n\nCreate a hook to listen for database events matching the constraints in `opts`.\n`cb(op)` fires for each matching operation for `op`, an object with `type`,\n`key`, and `value` properties.\n\nYou can use these keys as constraints, just like level core:\n\n* `opts.gte`, `opts.start`, `opts.min` - greater than or equal to\n* `opts.gt` - greater than\n* `opts.lte`, `opts.end`, `opts.max` - less than or equal to\n* `opts.lt` - less than\n\nYou can also specify a keyEncoding with `opts.keyEncoding`. If there was a\nkeyEncoding set up by leveldb in the constructor (at `db.options.keyEncoding`),\nthat one will be used.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/level-post.git"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "version": "1.0.7"
}
