{
  "_args": [
    [
      {
        "raw": "fastparallel@^2.2.0",
        "scope": null,
        "escapedName": "fastparallel",
        "name": "fastparallel",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/steed"
    ]
  ],
  "_from": "fastparallel@>=2.2.0 <3.0.0",
  "_id": "fastparallel@2.3.0",
  "_inCache": true,
  "_location": "/fastparallel",
  "_nodeVersion": "4.4.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/fastparallel-2.3.0.tgz_1464018954397_0.037000002805143595"
  },
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "2.15.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fastparallel@^2.2.0",
    "scope": null,
    "escapedName": "fastparallel",
    "name": "fastparallel",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/steed"
  ],
  "_resolved": "https://registry.npmjs.org/fastparallel/-/fastparallel-2.3.0.tgz",
  "_shasum": "1e709bfb6a03993f3857e3ce7f01311ce7602613",
  "_shrinkwrap": null,
  "_spec": "fastparallel@^2.2.0",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/steed",
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "bugs": {
    "url": "https://github.com/mcollina/fastparallel/issues"
  },
  "dependencies": {
    "reusify": "^1.0.0",
    "xtend": "^4.0.1"
  },
  "description": "Zero-overhead asynchronous parallel/each/map function call",
  "devDependencies": {
    "async": "^2.0.0-rc.5",
    "fastbench": "^1.0.1",
    "faucet": "0.0.1",
    "insync": "^2.1.0",
    "items": "^2.1.0",
    "neo-async": "^1.8.2",
    "parallelize": "^3.0.0",
    "pre-commit": "^1.1.3",
    "standard": "^7.1.0",
    "tape": "^4.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "1e709bfb6a03993f3857e3ce7f01311ce7602613",
    "tarball": "https://registry.npmjs.org/fastparallel/-/fastparallel-2.3.0.tgz"
  },
  "gitHead": "aa2d78fb8e57af81b35e7bb2f35ec3f3c0a77cde",
  "homepage": "https://github.com/mcollina/fastparallel",
  "keywords": [
    "parallel",
    "fast",
    "async"
  ],
  "license": "ISC",
  "main": "parallel.js",
  "maintainers": [
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    }
  ],
  "name": "fastparallel",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# fastparallel [![Build Status](https://travis-ci.org/mcollina/fastparallel.svg?branch=master)](https://travis-ci.org/mcollina/fastparallel)\n\nZero-overhead parallel function call for node.js. Also supports each\nand map!\n\nBenchmark for doing 3 calls `setImmediate` 1 million times:\n\n* non-reusable `setImmediate`: 1781ms\n* `async.parallel`: 3484ms\n* `async.each`: 2621ms\n* `async.map`: 3054ms\n* `neoAsync.parallel`: 2162ms\n* `neoAsync.each`: 2156ms\n* `neoAsync.map`: 2080ms\n* `insync.parallel`: 10252ms\n* `insync.each`: 2397ms\n* `insync.map`: 9700ms\n* `items.parallel`: 3725ms\n* `parallelize`: 2928ms\n* `fastparallel` with results: 2139ms\n* `fastparallel` without results: 1957ms\n* `fastparallel` map: 2102ms\n* `fastparallel` each: 1941ms\n\nThese benchmarks where taken via `bench.js` on node v4.2.2, on a MacBook\nPro Retina Mid 2014 (i7, 16GB of RAM).\n\nIf you need zero-overhead series function call, check out\n[fastseries](http://npm.im/fastseries). If you need a fast work queue\ncheck out [fastq](http://npm.im/fastq). If you need to run fast\nwaterfall calls, use [fastfall](http://npm.im/fastfall).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n__The major difference between version 1.x.x and 2.x.x is the order of\nresults__, this is now ready to replace async in every case.\n\n## Example for parallel call\n\n```js\nvar parallel = require('fastparallel')({\n  // this is a function that will be called\n  // when a parallel completes\n  released: completed,\n\n  // if you want the results, then here you are\n  results: true\n})\n\nparallel(\n  {}, // what will be this in the functions\n  [something, something, something], // functions to call\n  42, // the first argument of the functions\n  done // the function to be called when the parallel ends\n)\n\nfunction something (arg, cb) {\n  setImmediate(cb, null, 'myresult')\n}\n\nfunction done (err, results) {\n  console.log('parallel completed, results:', results)\n}\n\nfunction completed () {\n  console.log('parallel completed!')\n}\n```\n\n## Example for each and map calls\n\n```js\nvar parallel = require('fastparallel')({\n  // this is a function that will be called\n  // when a parallel completes\n  released: completed,\n\n  // if you want the results, then here you are\n  // passing false disables map\n  results: true\n})\n\nparallel(\n  {}, // what will be this in the functions\n  something, // functions to call\n  [1, 2, 3], // the first argument of the functions\n  done // the function to be called when the parallel ends\n)\n\nfunction something (arg, cb) {\n  setImmediate(cb, null, 'myresult')\n}\n\nfunction done (err, results) {\n  console.log('parallel completed, results:', results)\n}\n\nfunction completed () {\n  console.log('parallel completed!')\n}\n\n```\n\n## Caveats\n\nThe `done` function will be called only once, even if more than one error happen.\n\nThis library works by caching the latest used function, so that running a new parallel\ndoes not cause **any memory allocations**.\n\n## Why it is so fast?\n\n1. This library is caching functions a lot.\n\n2. V8 optimizations: thanks to caching, the functions can be optimized by V8 (if they are optimizable, and I took great care of making them so).\n\n3. Don't use arrays if you just need a queue. A linked list implemented via processes is much faster if you don't need to access elements in between.\n\n4. Accept passing a this for the functions. Thanks to this hack, you can extract your functions, and place them in a outer level where they are not created at every execution.\n\n## License\n\nISC\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/fastparallel.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "tape test.js | faucet"
  },
  "version": "2.3.0"
}
