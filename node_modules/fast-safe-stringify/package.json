{
  "_args": [
    [
      {
        "raw": "fast-safe-stringify@^1.1.3",
        "scope": null,
        "escapedName": "fast-safe-stringify",
        "name": "fast-safe-stringify",
        "rawSpec": "^1.1.3",
        "spec": ">=1.1.3 <2.0.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pino"
    ]
  ],
  "_from": "fast-safe-stringify@>=1.1.3 <2.0.0",
  "_id": "fast-safe-stringify@1.2.3",
  "_inCache": true,
  "_location": "/fast-safe-stringify",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fast-safe-stringify-1.2.3.tgz_1515765929145_0.32130450615659356"
  },
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fast-safe-stringify@^1.1.3",
    "scope": null,
    "escapedName": "fast-safe-stringify",
    "name": "fast-safe-stringify",
    "rawSpec": "^1.1.3",
    "spec": ">=1.1.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pino",
    "/quick-format-unescaped"
  ],
  "_resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-1.2.3.tgz",
  "_shasum": "9fe22c37fb2f7f86f06b8f004377dbf8f1ee7bc1",
  "_shrinkwrap": null,
  "_spec": "fast-safe-stringify@^1.1.3",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pino",
  "author": {
    "name": "David Mark Clements"
  },
  "bugs": {
    "url": "https://github.com/davidmarkclements/fast-safe-stringify/issues"
  },
  "dependencies": {},
  "description": "Safely and quickly serialize JavaScript objects",
  "devDependencies": {
    "clone": "^2.1.0",
    "fastbench": "^1.0.1",
    "json-stringify-safe": "^5.0.1",
    "standard": "^9.0.0",
    "tap": "^10.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-QJYT/i0QYoiZBQ71ivxdyTqkwKkQ0oxACXHYxH2zYHJEgzi2LsbjgvtzTbLi1SZcF190Db2YP7I7eTsU2egOlw==",
    "shasum": "9fe22c37fb2f7f86f06b8f004377dbf8f1ee7bc1",
    "tarball": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-1.2.3.tgz"
  },
  "gitHead": "c4437c6f1207843ae2f7c92c7ea3550209ba41dc",
  "homepage": "https://github.com/davidmarkclements/fast-safe-stringify#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bridgear",
      "email": "ruben@bridgewater.de"
    },
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    },
    {
      "name": "davidmarkclements",
      "email": "huperekchuno@googlemail.com"
    }
  ],
  "name": "fast-safe-stringify",
  "optionalDependencies": {},
  "readme": "# fast-safe-stringify\n\nSafely and quickly serialize JavaScript objects\n\nDetects circular dependencies instead of throwing (as per usual `JSON.stringify`\nusage)\n\n## Usage\n\n```js\nvar safeStringify = require('fast-safe-stringify')\nvar o = { a: 1 }\no.o = o\n\nconsole.log(safeStringify(o))  // '{\"a\":1,\"o\":\"[Circular]\"}'\nconsole.log(JSON.stringify(o)) //<-- throws\n```\n\n### toJSON support\n\n`fast-safe-stringify` would not attempt to detect circular dependencies on\nobjects that have a `toJSON` function. If you need to do that, you will need to\nattach a `toJSON.forceDecirc = true` property, like so:\n\n```js\nvar obj = {\n  toJSON: function () {\n    // something here..\n    return { something: 'else' }\n  }\n}\nobj.toJSON.forceDecirc = true\n```\n\n## Benchmarks\n\nThe [json-stringify-safe](http://npm.im/json-stringify-safe) module supplies\nsimilar functionality with more info and flexibility.\n\nAlthough not JSON, the core `util.inspect` method can be used for similar\npurposes (e.g. logging) and also handles circular references.\n\nHere we compare `fast-safe-stringify` with these alternatives:\n\n```\ninspectBench*10000: 44.441ms\njsonStringifySafeBench*10000: 38.324ms\nfastSafeStringifyBench*10000: 25.165ms\n\ninspectCircBench*10000: 66.541ms\njsonStringifyCircSafeBench*10000: 37.949ms\nfastSafeStringifyCircBench*10000: 33.801ms\n\ninspectDeepBench*10000: 377.053ms\njsonStringifySafeDeepBench*10000: 658.650ms\nfastSafeStringifyDeepBench*10000: 268.092ms\n\ninspectDeepCircBench*10000: 351.387ms\njsonStringifySafeDeepCircBench*10000: 695.964ms\nfastSafeStringifyDeepCircBench*10000: 256.660ms\n```\n\n## Protip\n\nWhether you're using `fast-safe-stringify` or `json-stringify-safe` if your use\ncase consists of deeply nested objects without circular references the following\npattern will give you best results:\n\n```js\nvar fastSafeStringify = require('fast-safe-stringify')\nfunction tryStringify (obj) {\n  try { return JSON.stringify(obj) } catch (_) {}\n}\nvar str = tryStringify(deep) || fastSafeStringify(deep)\n```\n\nIf you're likely to be handling mostly shallow or one level nested objects, this\nsame pattern will degrade performance - it's entirely dependant on use case.\n\n## JSON.stringify options\n\nJSON.stringify's `replacer` and `space` options are not supported. Any value\nother than 0 for `space` halves the speed, and providing a replacer function can\nresult in a segfault. Given that the primary focus of this serializer is speed,\nthe trade offs for supporting these options are not desirable.\n\n## Acknowledgements\n\nSponsored by [nearForm](http://nearform.com)\n\n## License\n\nMIT\n\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidmarkclements/fast-safe-stringify.git"
  },
  "scripts": {
    "test": "standard && tap test.js"
  },
  "typings": "index",
  "version": "1.2.3"
}
