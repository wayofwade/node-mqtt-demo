{
  "_args": [
    [
      {
        "raw": "qlobber@~0.7.0",
        "scope": null,
        "escapedName": "qlobber",
        "name": "qlobber",
        "rawSpec": "~0.7.0",
        "spec": ">=0.7.0 <0.8.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/mosca"
    ]
  ],
  "_from": "qlobber@>=0.7.0 <0.8.0",
  "_id": "qlobber@0.7.0",
  "_inCache": true,
  "_location": "/qlobber",
  "_nodeVersion": "4.4.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/qlobber-0.7.0.tgz_1462053857916_0.13712080055847764"
  },
  "_npmUser": {
    "name": "davedoesdev",
    "email": "dahalls@gmail.com"
  },
  "_npmVersion": "2.15.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "qlobber@~0.7.0",
    "scope": null,
    "escapedName": "qlobber",
    "name": "qlobber",
    "rawSpec": "~0.7.0",
    "spec": ">=0.7.0 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ascoltatori",
    "/mosca",
    "/qlobber-fsq"
  ],
  "_resolved": "https://registry.npmjs.org/qlobber/-/qlobber-0.7.0.tgz",
  "_shasum": "0229b635cd7d20ad7b3acf298da6d2b94f0e34cf",
  "_shrinkwrap": null,
  "_spec": "qlobber@~0.7.0",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/mosca",
  "author": {
    "name": "David Halls",
    "email": "dave@davedoesdev.com",
    "url": "http://www.davedoesdev.com"
  },
  "bugs": {
    "url": "https://github.com/davedoesdev/qlobber/issues"
  },
  "dependencies": {},
  "description": "Node.js globbing for amqp-like topics",
  "devDependencies": {
    "b": "git://github.com/davedoesdev/b.git",
    "chai": "~3.5.0",
    "coveralls": "~2.11.8",
    "grunt": "~1.0.1",
    "grunt-apidox": "~0.1.8",
    "grunt-contrib-jshint": "~1.0.0",
    "grunt-mocha-test": "~0.12.7",
    "grunt-shell": "~1.3.0",
    "istanbul": "~0.4.2",
    "mocha": "~2.4.5"
  },
  "directories": {
    "test": "test",
    "lib": "lib"
  },
  "dist": {
    "shasum": "0229b635cd7d20ad7b3acf298da6d2b94f0e34cf",
    "tarball": "https://registry.npmjs.org/qlobber/-/qlobber-0.7.0.tgz"
  },
  "engines": {
    "node": ">= 0.12"
  },
  "gitHead": "3b9ea0b69209357feed4d14d5ad6dfb86057cb02",
  "homepage": "https://github.com/davedoesdev/qlobber",
  "keywords": [
    "amqp",
    "mqtt",
    "rabbitmq",
    "cybertron",
    "ascoltatore"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "davedoesdev",
      "email": "dave@davedoesdev.com"
    }
  ],
  "name": "qlobber",
  "optionalDependencies": {},
  "readme": "# qlobber&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/davedoesdev/qlobber.png)](https://travis-ci.org/davedoesdev/qlobber) [![Coverage Status](https://coveralls.io/repos/davedoesdev/qlobber/badge.png?branch=master)](https://coveralls.io/r/davedoesdev/qlobber?branch=master) [![NPM version](https://badge.fury.io/js/qlobber.png)](http://badge.fury.io/js/qlobber)\n\nNode.js globbing for amqp-like topics.\n\nExample:\n\n```javascript\nvar Qlobber = require('qlobber').Qlobber;\nvar matcher = new Qlobber();\nmatcher.add('foo.*', 'it matched!');\nassert.deepEqual(matcher.match('foo.bar'), ['it matched!']);\n```\n\nThe API is described [here](#tableofcontents).\n\nqlobber is implemented using a trie, as described in the RabbitMQ blog posts [here](http://www.rabbitmq.com/blog/2010/09/14/very-fast-and-scalable-topic-routing-part-1/) and [here](http://www.rabbitmq.com/blog/2011/03/28/very-fast-and-scalable-topic-routing-part-2/).\n\n## Installation\n\n```shell\nnpm install qlobber\n```\n\n## Another Example\n\nA more advanced example using topics from the [RabbitMQ topic tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html):\n\n```javascript\nvar matcher = new Qlobber();\nmatcher.add('*.orange.*', 'Q1');\nmatcher.add('*.*.rabbit', 'Q2');\nmatcher.add('lazy.#', 'Q2');\nassert.deepEqual(['quick.orange.rabbit',\n                  'lazy.orange.elephant',\n                  'quick.orange.fox',\n                  'lazy.brown.fox',\n                  'lazy.pink.rabbit',\n                  'quick.brown.fox',\n                  'orange',\n                  'quick.orange.male.rabbit',\n                  'lazy.orange.male.rabbit'].map(function (topic)\n                  {\n                      return matcher.match(topic).sort();\n                  }),\n                 [['Q1', 'Q2'],\n                  ['Q1', 'Q2'],\n                  ['Q1'],\n                  ['Q2'],\n                  ['Q2', 'Q2'],\n                  [],\n                  [],\n                  [],\n                  ['Q2']]);\n```\n\n## Licence\n\n[MIT](LICENCE)\n\n## Tests\n\nqlobber passes the [RabbitMQ topic tests](https://github.com/rabbitmq/rabbitmq-server/blob/master/src/rabbit_tests.erl) (I converted them from Erlang to Javascript).\n\nTo run the tests:\n\n```shell\ngrunt test\n```\n\n## Lint\n\n```shell\ngrunt lint\n```\n\n## Code Coverage\n\n```shell\ngrunt coverage\n```\n\n[Instanbul](http://gotwarlost.github.io/istanbul/) results are available [here](http://rawgit.davedoesdev.com/davedoesdev/qlobber/master/coverage/lcov-report/index.html).\n\nCoveralls page is [here](https://coveralls.io/r/davedoesdev/qlobber).\n\n## Benchmarks\n\n```shell\ngrunt bench\n```\n\nqlobber is also benchmarked in [ascoltatori](https://github.com/mcollina/ascoltatori).\n\n# API\n\n_Source: [lib/qlobber.js](lib/qlobber.js)_\n\n<a name=\"tableofcontents\"></a>\n\n- <a name=\"toc_qlobberoptions\"></a>[Qlobber](#qlobberoptions)\n- <a name=\"toc_qlobberprototypeaddtopic-val\"></a><a name=\"toc_qlobberprototype\"></a>[Qlobber.prototype.add](#qlobberprototypeaddtopic-val)\n- <a name=\"toc_qlobberprototyperemovetopic-val\"></a>[Qlobber.prototype.remove](#qlobberprototyperemovetopic-val)\n- <a name=\"toc_qlobberprototypematchtopic\"></a>[Qlobber.prototype.match](#qlobberprototypematchtopic)\n- <a name=\"toc_qlobberprototypeclear\"></a>[Qlobber.prototype.clear](#qlobberprototypeclear)\n- <a name=\"toc_qlobberdedupoptions\"></a>[QlobberDedup](#qlobberdedupoptions)\n- <a name=\"toc_qlobberdedupprototypematchtopic\"></a><a name=\"toc_qlobberdedupprototype\"></a>[QlobberDedup.prototype.match](#qlobberdedupprototypematchtopic)\n\n## Qlobber([options])\n\n> Creates a new qlobber.\n\n**Parameters:**\n\n- `{Object} [options]` Configures the qlobber. Use the following properties: \n  - `{String} separator` The character to use for separating words in topics. Defaults to '.'. MQTT uses '/' as the separator, for example.\n\n  - `{String} wildcard_one` The character to use for matching exactly one word in a topic. Defaults to '*'. MQTT uses '+', for example.\n\n  - `{String} wildcard_some` The character to use for matching zero or more words in a topic. Defaults to '#'. MQTT uses '#' too.\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberprototype\"></a>\n\n## Qlobber.prototype.add(topic, val)\n\n> Add a topic matcher to the qlobber.\n\nNote you can match more than one value against a topic by calling `add` multiple times with the same topic and different values.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n- `{Any} val` The value to return if the topic is matched. `undefined` is not supported.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.remove(topic, [val])\n\n> Remove a topic matcher from the qlobber.\n\n**Parameters:**\n\n- `{String} topic` The topic that's being matched against.\n- `{Any} [val]` The value that's being matched. If you don't specify `val` then all matchers for `topic` are removed.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Array}` List of values that matched the topic. This may contain duplicates.\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## Qlobber.prototype.clear()\n\n> Reset the qlobber.\n\nRemoves all topic matchers from the qlobber.\n\n**Return:**\n\n`{Qlobber}` The qlobber (for chaining).\n\n<sub>Go: [TOC](#tableofcontents) | [Qlobber.prototype](#toc_qlobberprototype)</sub>\n\n## QlobberDedup([options])\n\n> Creates a new de-duplicating qlobber.\n\nInherits from [Qlobber](#qlobberoptions).\n\n**Parameters:**\n\n- `{Object} [options]` Same options as [Qlobber](#qlobberoptions).\n\n<sub>Go: [TOC](#tableofcontents)</sub>\n\n<a name=\"qlobberdedupprototype\"></a>\n\n## QlobberDedup.prototype.match(topic)\n\n> Match a topic.\n\n**Parameters:**\n\n- `{String} topic` The topic to match against.\n\n**Return:**\n\n`{Set}` [ES6 Set](http://www.ecma-international.org/ecma-262/6.0/#sec-set-objects) of values that matched the topic.\n\n<sub>Go: [TOC](#tableofcontents) | [QlobberDedup.prototype](#toc_qlobberdedupprototype)</sub>\n\n_&mdash;generated by [apidox](https://github.com/codeactual/apidox)&mdash;_\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davedoesdev/qlobber.git"
  },
  "scripts": {
    "test": "grunt lint test",
    "travis-test": "grunt lint test coverage coveralls"
  },
  "version": "0.7.0"
}
