{
  "_args": [
    [
      {
        "raw": "bytewise-core@^1.2.2",
        "scope": null,
        "escapedName": "bytewise-core",
        "name": "bytewise-core",
        "rawSpec": "^1.2.2",
        "spec": ">=1.2.2 <2.0.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/bytewise"
    ]
  ],
  "_from": "bytewise-core@>=1.2.2 <2.0.0",
  "_id": "bytewise-core@1.2.3",
  "_inCache": true,
  "_location": "/bytewise-core",
  "_nodeVersion": "0.10.35",
  "_npmUser": {
    "name": "deanlandolt",
    "email": "dean@deanlandolt.com"
  },
  "_npmVersion": "2.11.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bytewise-core@^1.2.2",
    "scope": null,
    "escapedName": "bytewise-core",
    "name": "bytewise-core",
    "rawSpec": "^1.2.2",
    "spec": ">=1.2.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/bytewise"
  ],
  "_resolved": "https://registry.npmjs.org/bytewise-core/-/bytewise-core-1.2.3.tgz",
  "_shasum": "3fb410c7e91558eb1ab22a82834577aa6bd61d42",
  "_shrinkwrap": null,
  "_spec": "bytewise-core@^1.2.2",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/bytewise",
  "author": {
    "name": "Dean Landolt",
    "email": "dean@deanlandolt.com"
  },
  "bugs": {
    "url": "https://github.com/deanlandolt/bytewise/issues"
  },
  "dependencies": {
    "typewise-core": "^1.2"
  },
  "description": "Binary serialization of arbitrarily complex structures that sort element-wise",
  "devDependencies": {
    "faucet": "0.0.1",
    "tape": "^1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "3fb410c7e91558eb1ab22a82834577aa6bd61d42",
    "tarball": "https://registry.npmjs.org/bytewise-core/-/bytewise-core-1.2.3.tgz"
  },
  "gitHead": "405c5c3f334c1b1ea3aab1a790d3354809c46f6d",
  "homepage": "https://github.com/deanlandolt/bytewise-core",
  "keywords": [
    "binary",
    "sort",
    "collation",
    "serialization",
    "leveldb",
    "indexeddb"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "deanlandolt",
      "email": "dean@deanlandolt.com"
    }
  ],
  "name": "bytewise-core",
  "optionalDependencies": {},
  "readme": "bytewise-core\n=============\n\nBinary serialization of arbitrarily complex structures that sort element-wise\n\n[![build status](https://travis-ci.org/deanlandolt/bytewise-core.svg?branch=master)](https://travis-ci.org/deanlandolt/bytewise-core)\n\nAllows efficient comparison of a variety of useful data structures in a way that respects the sort order defined by [typewise](https://github.com/deanlandolt/typewise).\n\nThis library defines a total order for well-structured keyspaces in key value stores. The ordering is a superset of the sorting algorithm defined by [IndexedDB](http://www.w3.org/TR/IndexedDB/#key-construct) and the one defined by [CouchDB](http://wiki.apache.org/couchdb/View_collation). This serialization makes it easy to take advantage of the benefits of structured indexing in systems with fast but naïve binary indexing (key/value databases).\n\n\n## Order of Supported Structures\n\nThis package is a barebones kernel of [bytewise](https://github.com/deanlandolt/bytewise), containing only the structures most often used to create structured keyspaces.\n\nThis is the top level order of the various structures that may be encoded:\n\n* `null`\n* `false`\n* `true`\n* `Number` (numeric)\n* `Date` (time-wise)\n* `Buffer`, `Uint8Array` (bit-wise)\n* `String` (character-wise)\n* `Array` (element-wise)\n* `undefined`\n\nStructured types like `Array` may recursively contain any other supported structures.\n\n\n## Usage\n\n`encode` serializes any supported type and returns a `Buffer`, or throws if an\nunsupported structure is provided.\n\n```js\nvar assert = require('assert')\nvar bytewise = require('./')\nvar encode = bytewise.encode\n\n// Numbers are stored in 9 bytes -- 1 byte for the type tag and an 8 byte float\nassert.equal(encode(12345).toString('hex'), '4240c81c8000000000')\n// Negative numbers are stored as positive numbers, but with a lower type tag and their bits inverted\nassert.equal(encode(-12345).toString('hex'), '41bf37e37fffffffff')\n\n// The `toString` method of `Buffer` values returned by `encode` is augmented\n// to use \"hex\" encoding by default. This ensures bytewise encoding still\n// works when bytewise keys are accidentally coerced to strings.\nassert.equal(encode(-12345) + '', '41bf37e37fffffffff')\n\n// All numbers, integer or floating point, are stored as IEEE 754 doubles\nassert.equal(encode(1.2345) + '', '423ff3c083126e978d')\nassert.equal(encode(-1.2345) + '', '41c00c3f7ced916872')\n\n// Serialization does not preserve the sign bit, so 0 is indistinguishable from -0\nassert.equal(encode(-0) + '', '420000000000000000')\nassert.equal(encode(0) + '', '420000000000000000')\n\n// Strings are encoded as utf8, prefixed with their type tag (0x70, or the \"p\" character)\nassert.equal(encode('foo').toString('utf8'), 'pfoo')\nassert.equal(encode('föo').toString('utf8'), 'pföo')\n\n// Arrays are just a series of values, separated by and terminated with a null byte\nassert.equal(encode([ 'foo', 'bar' ]) + '', 'a070666f6f00706261720000')\n\n// Items in arrays are delimited by null bytes, and a final end byte marks the end of the array\nassert.equal(encode([ 'foo' ]).toString('binary'), '\\xa0pfoo\\x00\\x00')\n\n// Complex types like arrays can be arbitrarily nested, and fixed-sized types don't require a terminating byte\nassert.equal(encode([ [ 'foo', 10 ], 'bar' ]) + '', 'a0a070666f6f0042402400000000000000706261720000')\n```\n\n\n`decode` parses a buffer and returns the structured data.\n  \n```js\nvar decode = bytewise.decode\nvar key = 'a0a070666f6f0042402400000000000000706261720000'\n\n// Decode takes a buffer and decodes a bytewise value\nassert.deepEqual(decode(new Buffer(key, 'hex')), [ [ 'foo', 10 ], 'bar' ])\n\n// String input can be decoded, defaulting to hex\nassert.deepEqual(decode(key), [ [ 'foo', 10 ], 'bar' ])\n\n// An alternate string encoding can be provided when initializing bytewise\n// TODO\n```\n\n\n## Use Cases\n\nTake a look at the [bytewise](https://github.com/deanlandolt/bytewise#use-cases) library for an idea of what kind of stuff this could be useful for.\n\n\n## Issues\n\nIssues should be reported [here](https://github.com/deanlandolt/bytewise/issues).\n\n\n## License\n\n[MIT](http://deanlandolt.mit-license.org/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/deanlandolt/bytewise-core.git"
  },
  "scripts": {
    "test": "tape test | faucet"
  },
  "version": "1.2.3"
}
