{
  "_args": [
    [
      {
        "raw": "int64-buffer@^0.1.9",
        "scope": null,
        "escapedName": "int64-buffer",
        "name": "int64-buffer",
        "rawSpec": "^0.1.9",
        "spec": ">=0.1.9 <0.2.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/msgpack-lite"
    ]
  ],
  "_from": "int64-buffer@>=0.1.9 <0.2.0",
  "_id": "int64-buffer@0.1.10",
  "_inCache": true,
  "_location": "/int64-buffer",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/int64-buffer-0.1.10.tgz_1512286033452_0.8047918069642037"
  },
  "_npmUser": {
    "name": "kawanet",
    "email": "u-suke@kawa.net"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "int64-buffer@^0.1.9",
    "scope": null,
    "escapedName": "int64-buffer",
    "name": "int64-buffer",
    "rawSpec": "^0.1.9",
    "spec": ">=0.1.9 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/msgpack-lite"
  ],
  "_resolved": "https://registry.npmjs.org/int64-buffer/-/int64-buffer-0.1.10.tgz",
  "_shasum": "277b228a87d95ad777d07c13832022406a473423",
  "_shrinkwrap": null,
  "_spec": "int64-buffer@^0.1.9",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/msgpack-lite",
  "author": {
    "name": "@kawanet"
  },
  "bugs": {
    "url": "https://github.com/kawanet/int64-buffer/issues"
  },
  "contributors": [
    {
      "name": "kawanet",
      "email": "u-suke@kawa.net"
    },
    {
      "name": "pizza2code",
      "email": "christopher.guinnup@jhuapl.edu"
    },
    {
      "name": "Jan Krems",
      "email": "jan.krems@groupon.com"
    }
  ],
  "dependencies": {},
  "description": "64bit Long Integer on Buffer/Array/ArrayBuffer in Pure JavaScript",
  "devDependencies": {
    "jshint": "^2.9.5",
    "mocha": "^4.0.1",
    "uglify-js": "^3.1.10",
    "zuul": "^3.11.1"
  },
  "directories": {},
  "dist": {
    "shasum": "277b228a87d95ad777d07c13832022406a473423",
    "tarball": "https://registry.npmjs.org/int64-buffer/-/int64-buffer-0.1.10.tgz"
  },
  "gitHead": "22baa88b200b77b0e9c48f74e673752f655cba95",
  "homepage": "https://github.com/kawanet/int64-buffer",
  "jshintConfig": {
    "globals": {
      "describe": true,
      "it": true,
      "window": true
    },
    "node": true,
    "undef": true,
    "unused": true
  },
  "keywords": [
    "64bit",
    "IEEE-754",
    "arraybuffer",
    "buffer",
    "int",
    "int64",
    "int8array",
    "integer",
    "long",
    "longlong",
    "signed",
    "uint64",
    "unsinged"
  ],
  "license": "MIT",
  "main": "int64-buffer.js",
  "maintainers": [
    {
      "name": "kawanet",
      "email": "u-suke@kawa.net"
    }
  ],
  "name": "int64-buffer",
  "optionalDependencies": {},
  "readme": "# int64-buffer\n\n64bit Long Integer on Buffer/Array/ArrayBuffer in Pure JavaScript\n\n[![npm version](https://badge.fury.io/js/int64-buffer.svg)](http://badge.fury.io/js/int64-buffer) [![Build Status](https://travis-ci.org/kawanet/int64-buffer.svg?branch=master)](https://travis-ci.org/kawanet/int64-buffer)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/int64-buffer.svg)](https://saucelabs.com/u/int64-buffer)\n\nJavaScript's number based on IEEE-754 could only handle [53 bits](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) precision.\nThis module provides two pair of classes: `Int64BE`/`Uint64BE` and `Int64LE`/`Uint64LE` which could hold 64 bits long integer and loose no bit.\n\n### Features\n\n- `Int64BE`/`Int64LE` for signed integer, `Uint64BE`/`Uint64LE` for unsigned.\n- `Int64BE`/`Uint64BE` for big-endian, `Uint64BE`/`Uint64LE` for little-endian.\n- `Buffer`/`Uint8Array`/`Array`/`Array`-like storage of 8 bytes length with offset.\n- No mathematical methods provided, such as `add()`, `sub()`, `mul()`, `div()` etc.\n- Optimized only for 64 bits. If you need Int128, use [bignum](https://www.npmjs.com/package/bignum) etc.\n- Small. 3KB when minified. No other module required. Portable pure JavaScript.\n- [Tested](https://travis-ci.org/kawanet/int64-buffer) on node.js v4, v6, v8 and [Web browsers](https://saucelabs.com/u/int64-buffer).\n\n### Usage\n\n`Int64BE` is the class to host a 64 bit signed long integer `int64_t`.\n\n```js\nvar Int64BE = require(\"int64-buffer\").Int64BE;\n\nvar big = new Int64BE(-1);\n\nconsole.log(big - 0); // -1\n\nconsole.log(big.toBuffer()); // <Buffer ff ff ff ff ff ff ff ff>\n```\n\nIt uses `Buffer` on Node.js and `Uint8Array` on modern Web browsers.\n\n`Uint64BE` is the class to host a 64 bit unsigned positive long integer `uint64_t`.\n\n```js\nvar Uint64BE = require(\"int64-buffer\").Uint64BE;\n\nvar big = new Uint64BE(Math.pow(2, 63)); // a big number with 64 bits\n\nconsole.log(big - 0); // 9223372036854776000 = IEEE-754 loses last bits\n\nconsole.log(big + \"\"); // \"9223372036854775808\" = perfectly correct\n```\n\n`Int64LE` and `Uint64LE` work as same as above but with little-endian storage.\n\n### Input Constructor\n\n- new Uint64BE(number)\n\n```js\nvar big = new Uint64BE(1234567890);\nconsole.log(big - 0); // 1234567890\n```\n\n- new Uint64BE(high, low)\n\n```js\nvar big = new Uint64BE(0x12345678, 0x9abcdef0);\nconsole.log(big.toString(16)); // \"123456789abcdef0\"\n```\n\n- new Uint64BE(string, radix)\n\n```js\nvar big = new Uint64BE(\"123456789abcdef0\", 16);\nconsole.log(big.toString(16)); // \"123456789abcdef0\"\n```\n\n- new Uint64BE(buffer)\n\n```js\nvar buffer = new Buffer([1,2,3,4,5,6,7,8]);\nvar big = new Uint64BE(buffer);\nconsole.log(big.toString(16)); // \"102030405060708\"\n```\n\n- new Uint64BE(uint8array)\n\n```js\nvar uint8array = new Uint8Array([1,2,3,4,5,6,7,8]);\nvar big = new Uint64BE(uint8array);\nconsole.log(big.toString(16)); // \"102030405060708\"\n```\n\n- new Uint64BE(arraybuffer)\n\n```js\nvar arraybuffer = (new Uint8Array([1,2,3,4,5,6,7,8])).buffer;\nvar big = new Uint64BE(arraybuffer);\nconsole.log(big.toString(16)); // \"102030405060708\"\n```\n\n- new Uint64BE(array)\n\n```js\nvar array = [1,2,3,4,5,6,7,8];\nvar big = new Uint64BE(array);\nconsole.log(big.toString(16)); // \"102030405060708\"\n```\n\n- new Uint64BE(buffer, offset)\n\n```js\nvar buffer = new Buffer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]);\nvar big = new Uint64BE(buffer, 8);\nconsole.log(big.toString(16)); // \"90a0b0c0d0e0f10\"\n```\n\n- new Uint64BE(buffer, offset, number)\n\n```js\nvar buffer = new Buffer(16);\nvar big = new Uint64BE(buffer, 8, 0x1234567890);\nconsole.log(big.toString(16)); // \"1234567890\"\nconsole.log(buffer[15].toString(16)); // \"90\"\n```\n\n- new Uint64BE(buffer, offset, high, low)\n\n```js\nvar buffer = new Uint8Array(16);\nvar big = new Uint64BE(buffer, 8, 0x12345678, 0x9abcdef0);\nconsole.log(big.toString(16)); // \"123456789abcdef0\"\nconsole.log(buffer[15].toString(16)); // \"f0\"\n```\n\n- new Uint64BE(buffer, offset, string, radix)\n\n```js\nvar buffer = new Array(16);\nvar big = new Uint64BE(buffer, 8, \"123456789abcdef0\", 16);\nconsole.log(big.toString(16)); // \"123456789abcdef0\"\nconsole.log(buffer[15].toString(16)); // \"f0\"\n```\n\n### Output Methods\n\n- Number context\n\n```js\nvar big = Uint64BE(1234567890);\nconsole.log(big - 0); // 1234567890\n```\n\n- String context\n\n```js\nvar big = Uint64BE(1234567890);\nconsole.log(big + \"\"); // \"1234567890\"\n```\n\n- JSON context\n\n```js\nvar big = Uint64BE();\nconsole.log(JSON.stringify({big: big})); // {\"big\":1234567890}\n```\n\n- toNumber()\n\n```js\nvar big = Uint64BE(1234567890);\nconsole.log(big.toNumber()); // 1234567890\n```\n\n- toString(radix)\n\n```js\nvar big = Uint64BE(0x1234567890);\nconsole.log(big.toString()); // \"78187493520\"\nconsole.log(big.toString(16)); // \"1234567890\"\n```\n\n- toBuffer()\n\n```js\nvar big = Uint64BE([1,2,3,4,5,6,7,8]);\nconsole.log(big.toBuffer()); // <Buffer 01 02 03 04 05 06 07 08>\n```\n\n- toArrayBuffer()\n\n```js\nvar big = Uint64BE(0);\nvar buf = new Int8Array(big.toArrayBuffer());\nconsole.log(buf); // Int8Array { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5, '5': 6, '6': 7, '7': 8 }\n```\n\n- toArray()\n\n```js\nvar big = Uint64BE([1,2,3,4,5,6,7,8]);\nconsole.log(big.toArray()); // [ 1, 2, 3, 4, 5, 6, 7, 8 ]\n```\n\n### Browsers Build\n\n[int64-buffer.min.js](https://rawgit.com/kawanet/int64-buffer/master/dist/int64-buffer.min.js) is [tested](https://saucelabs.com/u/int64-buffer) on major Web browsers.\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<script src=\"https://rawgit.com/kawanet/int64-buffer/master/dist/int64-buffer.min.js\"></script>\n<script>\n\n  var i = Int64BE(\"1234567890123456789\");\n  console.log(i.toString(10)); // \"1234567890123456789\"\n  \n  var u = new Uint64BE([0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF]);\n  console.log(u.toString(16)); // \"123456789abcdef\"\n\n</script>\n```\n\n### Installation\n\n```sh\nnpm install int64-buffer --save\n```\n\n### GitHub\n\n- [https://github.com/kawanet/int64-buffer](https://github.com/kawanet/int64-buffer)\n\n### The MIT License (MIT)\n\nCopyright (c) 2015-2017 Yusuke Kawasaki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kawanet/int64-buffer.git"
  },
  "scripts": {
    "fixpack": "fixpack",
    "test": "make test"
  },
  "typings": "int64-buffer.d.ts",
  "version": "0.1.10"
}
