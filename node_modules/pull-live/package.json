{
  "_args": [
    [
      {
        "raw": "pull-live@^1.0.1",
        "scope": null,
        "escapedName": "pull-live",
        "name": "pull-live",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pull-level"
    ]
  ],
  "_from": "pull-live@>=1.0.1 <2.0.0",
  "_id": "pull-live@1.0.1",
  "_inCache": true,
  "_location": "/pull-live",
  "_nodeVersion": "5.11.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/pull-live-1.0.1.tgz_1463777404101_0.207167784916237"
  },
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pull-live@^1.0.1",
    "scope": null,
    "escapedName": "pull-live",
    "name": "pull-live",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pull-level"
  ],
  "_resolved": "https://registry.npmjs.org/pull-live/-/pull-live-1.0.1.tgz",
  "_shasum": "a4ecee01e330155e9124bbbcf4761f21b38f51f5",
  "_shrinkwrap": null,
  "_spec": "pull-live@^1.0.1",
  "_where": "/Users/chencc/work/WebstormProjects/node-mqtt/node_modules/pull-level",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/pull-live/issues"
  },
  "dependencies": {
    "pull-cat": "^1.1.9",
    "pull-stream": "^3.4.0"
  },
  "description": "construct a pull-stream for reading from a writable source, can read old records, new (live) records, or both.",
  "devDependencies": {
    "pull-pushable": "^2.0.0",
    "tape": "^4.5.1"
  },
  "directories": {},
  "dist": {
    "shasum": "a4ecee01e330155e9124bbbcf4761f21b38f51f5",
    "tarball": "https://registry.npmjs.org/pull-live/-/pull-live-1.0.1.tgz"
  },
  "gitHead": "3101a3087029ee9503cfeb1cadc55756a5b0893c",
  "homepage": "https://github.com/dominictarr/pull-live",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "pull-live",
  "optionalDependencies": {},
  "readme": "# pull-live\n\nconstruct a pull-stream for reading from a writable source,\ncan read old records, new (live) records, or both.\n\nto be used by [pull-level](https://github.com/pull-stream/pull-level), \n[multiblobs](https://github.com/dominictarr/multiblob), and\n[secure-scuttlebutt](https://github.com/ssbc/secure-scuttlebutt).\n`pull-live` is generic, and easy to adapt to a new case.\n\n## api: createLive(createSource(opts), createLive(opts)) => createLiveStream(opts)\n\n\ncreateLive takes two functions, `createSource` (which returns a source\nstream of the stored data) and `createLive` which returns a stream\nof the live data. A function that takes `opts` and is returned.\n\nif `opts.live` is set to true, the stream will only read the old data\n(from `createSource`) and then the new data (from `createLive`) with\none item `{sync: true}` to mark when the old data has finished.\n\nIf `opts.sync === false` then the sync item will dropped.\n\nif `opts.live` is  true (default: `false`) the live data is included.\nif `opts.old` is false (default: `true`) the output will not include\nthe old data. If `live` and `old` are both false, an error is thrown.\n\nthe only valid options are `{live: true, old: false}` `{live: false, old: true}`\nand `{live: true, old: true}`\n\nI recomment using [pull-notify](https://github.com/pull-stream/pull-notify)\nto implement `createLive`.\n\n``` js\nvar MyLiveStream = createLive(createSource, createLive)\n\npull(MyLiveStrea({live:..., old:...}),...)\n```\n\n\n## License\n\nMIT\n\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/pull-live.git"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "version": "1.0.1"
}
